package com.cop.courses.multithreading;

import java.util.Random;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

class Account {
	
	private int balance = 10000;
	
	public void withdraw(int money) {
		this.balance -= money;
	}
	
	public void deposit(int money) {
		this.balance += money;
	}
	
	public static void transfer(Account acc1, Account acc2, int money) {
		acc1.withdraw(money);
		acc2.deposit(money);
	}
	
	public int getBalance() {
		return this.balance;
	}
	
}

class Runner2 {
	
	private Account acc1 = new Account();
	private Account acc2 = new Account();
	
	private Lock lock1 = new ReentrantLock();
	private Lock lock2 = new ReentrantLock();
	
	private void acquireLocks(Lock firstLock, Lock secondLock) {
		firstLock.lock();
		secondLock.lock();
	}
	
	public void firstThread() {
		
		Random random = new Random();
		
		for(int i = 0; i < 10000; i++) {
			
			lock1.lock();
			lock2.lock();
			
			try {
				Account.transfer(acc1, acc2, random.nextInt(100));
			} finally {
				lock1.unlock();
				lock2.unlock();
			}
		}
		
	}
	
	public void secondThread() {
		
		Random random = new Random();
		
		for(int i = 0; i < 10000; i++) {
			
			lock2.lock();
			lock2.lock();
			
			try {
				Account.transfer(acc2, acc1, random.nextInt(100));
			} finally {
				lock1.unlock();
				lock2.unlock();
			}
		}
		
	}
	
	public void finished() {
		System.out.println("Balance in account1: " + acc1.getBalance());
		System.out.println("Balance in account2: " + acc2.getBalance());
		System.out.println("Total balance: " + (acc1.getBalance()+acc2.getBalance()));
	}
	
}


public class _11Deadlock {
	
	public static void main(String[] args) throws InterruptedException {

		Runner2 runner = new Runner2();
		
		Thread t1 = new Thread(new Runnable() {
			
			public void run() {
				runner.firstThread();
			}
			
		});

		Thread t2 = new Thread(new Runnable() {
			
			public void run() {
				runner.secondThread();
			}

		});
		
		t1.start();
		t2.start();
		
		t1.join();
		t2.join();
		
		runner.finished();

	}
	
}
