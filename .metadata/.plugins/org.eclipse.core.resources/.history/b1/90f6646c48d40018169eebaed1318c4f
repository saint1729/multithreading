package com.cop.courses.multithreading;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;


class Connection {
	
	private static Connection instance = new Connection();
	
	private int connections = 0;
	
	private Connection() {
		
	}
	
	public static  Connection getInstance() {
		return instance;
	}
	
	public void connect() throws InterruptedException {
		
		synchronized(this) {
			this.connections += 1;
			System.out.println("Current connections: " + this.connections);
		}
		
		Thread.sleep(2000);
		
		synchronized (this) {
			this.connections -= 1;
		}
		
	}
	
}


public class _12Semaphores {
	
	public static void main(String[] args) throws InterruptedException {
		
		Connection.getInstance().connect();
		
		ExecutorService executor = Executors.newCachedThreadPool();
		
		for(int i = 0; i < 200; i++) {
			executor.submit(new Runnable() {
				
				public void run() {
					
				}
			});
		}
		
	}
	
}
