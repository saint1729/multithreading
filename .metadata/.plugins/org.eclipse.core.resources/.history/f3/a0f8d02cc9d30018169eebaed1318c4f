package com.cop.courses.multithreading;

import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

import com.sun.org.apache.xml.internal.utils.ThreadControllerWrapper;

class Runner {
	
	private Lock lock = new ReentrantLock();
	private Condition condition = lock.newCondition();
	private int count = 0;
	
	public void increment() {
		for(int i = 0; i < 10000; i++) {
			count += 1;
		}
	}
	
	public void firstThread() {
		
		lock.lock();
		increment();
		lock.unlock();
	}
	
	public void secondThread() {
		
		
		increment();
		
	}
	
	public void finished() {
		
		System.out.println("Count is: " + count);
		
	}
	
}



public class _10ReentrantLocks {

	public static void main(String[] args) {

		Runner runner = new Runner();
		
		Thread t1 = new Thread(new Runnable() {
			public void run() {
				runner.firstThread();
			}
		});
		
		Thread t2 = new Thread(new Runnable() {
			
			public void run() {
				runner.secondThread();
			}
		});
		
		
		t1.start();
		t2.start();
		
		try {
			t1.join();
			t2.join();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		
		runner.finished();
		
	}
	
}
